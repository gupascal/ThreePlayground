{"version":3,"sources":["logo.svg","Scene.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Environment","gltf","useLoader","GLTFLoader","scene","traverse","node","isMesh","castShadow","receiveShadow","object","dispose","Box","props","mesh","useRef","useState","hovered","setHover","active","setActive","useFrame","current","rotation","x","y","ref","scale","onClick","e","onPointerOver","onPointerOut","attach","args","color","Scene","className","shadowMap","position","makeDefault","fallback","focusDistance","focalLength","bokehScale","blendFunction","BlendFunction","NORMAL","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,gOCQ3C,SAASC,IACP,IAAMC,EAAOC,YAAUC,IAAY,4CASnC,OAPAF,EAAKG,MAAMC,UAAU,SAAUC,GACxBA,EAAKC,SACRD,EAAKE,YAAa,EAClBF,EAAKG,eAAgB,MAKvB,+BAAWC,OAAQT,EAAKG,MAAOO,QAAS,OAK5C,SAASC,EAAIC,GAET,IAAMC,EAAOC,mBAFG,EAKYC,oBAAS,GALrB,mBAKTC,EALS,KAKAC,EALA,OAMYF,oBAAS,GANrB,mBAMTG,EANS,KAMDC,EANC,KAWhB,OAFAC,aAAS,kBAAOP,EAAKQ,QAAQC,SAASC,EAAIV,EAAKQ,QAAQC,SAASE,GAAK,OAGnE,0CACMZ,EADN,CAEEa,IAAKZ,EACLa,MAAOR,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCS,QAAS,SAACC,GAAD,OAAOT,GAAWD,IAC3BW,cAAe,SAACD,GAAD,OAAOX,GAAS,IAC/Ba,aAAc,SAACF,GAAD,OAAOX,GAAS,MAC9B,uCAAmBc,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,0CAAsBD,OAAO,WAAWE,MAAOjB,EAAU,UAAY,YAkC9DkB,MA7Bf,WACI,OACI,kBAAC,IAAD,CAAQC,UAAU,YAAYC,WAAS,GACnC,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,uCACA,sCAAkBC,SAAU,CAAC,GAAI,GAAI,IAAK9B,YAAU,IACpD,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAmB+B,aAAW,EAACD,SAAU,CAAC,EAAG,EAAG,KAEhD,kBAAC1B,EAAD,CAAK0B,SAAU,EAAE,IAAK,EAAG,KACzB,kBAAC1B,EAAD,CAAK0B,SAAU,CAAC,IAAK,EAAG,KAExB,kBAAC,WAAD,CAAUE,SAAU,kBAAC,IAAD,mBAClB,kBAACxC,EAAD,MACA,kBAAC,IAAD,KAGE,kBAAC,IAAD,CACEyC,cAAe,KACfC,YAAa,IACbC,WAAY,EACZC,cAAeC,IAAcC,a,MCvDhCC,MAXf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKY,IAAKC,IAAMb,UAAU,WAAWc,IAAI,UAE3C,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45cc8725.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useState, Suspense } from 'react';\r\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber'\r\nimport { Html, MapControls, Stats, Sky, PerspectiveCamera } from 'drei'\r\nimport { EffectComposer, DepthOfField, SMAA, Pixelation, Depth, SSAO } from 'react-postprocessing'\r\nimport { BlendFunction } from 'postprocessing'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\n\r\nfunction Environment() {\r\n  const gltf = useLoader(GLTFLoader, \"/sample/low_poly_winter_scene/scene.gltf\")\r\n\r\n  gltf.scene.traverse( function( node ) {\r\n    if ( node.isMesh ) {\r\n      node.castShadow = true;\r\n      node.receiveShadow = true;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <primitive object={gltf.scene} dispose={null} />\r\n  )\r\n}\r\n\r\n\r\nfunction Box(props) {\r\n    // This reference will give us direct access to the mesh\r\n    const mesh = useRef()\r\n  \r\n    // Set up state for the hovered and active state\r\n    const [hovered, setHover] = useState(false)\r\n    const [active, setActive] = useState(false)\r\n  \r\n    // Rotate mesh every frame, this is outside of React without overhead\r\n    useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\r\n  \r\n    return (\r\n      <mesh\r\n        {...props}\r\n        ref={mesh}\r\n        scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\r\n        onClick={(e) => setActive(!active)}\r\n        onPointerOver={(e) => setHover(true)}\r\n        onPointerOut={(e) => setHover(false)}>\r\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n        <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : 'orange'} />\r\n      </mesh>\r\n    )\r\n  }\r\n  \r\nfunction Scene() {\r\n    return (\r\n        <Canvas className=\"MainScene\" shadowMap>\r\n            <Stats/>\r\n            <Sky/>\r\n            <ambientLight />\r\n            <directionalLight position={[10, 10, 10]} castShadow/>\r\n            <MapControls/>\r\n            <PerspectiveCamera makeDefault position={[4, 4, 8]} />\r\n\r\n            <Box position={[-1.2, 0, 0]} />\r\n            <Box position={[1.2, 0, 0]} />\r\n\r\n            <Suspense fallback={<Html>loading..</Html>}>\r\n              <Environment />\r\n              <EffectComposer>\r\n                {/* <Depth/> */}\r\n                {/* <SSAO samples={30} rings={4} scale={4.5} bias={2.5}/> */}\r\n                <DepthOfField\r\n                  focusDistance={0.007}\r\n                  focalLength={0.02}\r\n                  bokehScale={8.0}\r\n                  blendFunction={BlendFunction.NORMAL} />\r\n              </EffectComposer>\r\n            </Suspense>\r\n        </Canvas>\r\n    );\r\n}\r\n\r\nexport default Scene;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Scene from './Scene';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Scene/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}